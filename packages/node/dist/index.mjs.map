{"version":3,"file":"index.mjs","sources":["../src/storage/StorageUtility.ts","../src/ClientAuthentication.ts","../src/login/oidc/OidcLoginHandler.ts","../src/login/oidc/AggregateOidcHandler.ts","../src/login/oidc/IssuerConfigFetcher.ts","../src/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.ts","../src/login/oidc/oidcHandlers/RefreshTokenOidcHandler.ts","../src/constant.ts","../src/sessionInfo/SessionInfoManager.ts","../src/login/oidc/incomingRedirectHandler/AuthCodeRedirectHandler.ts","../src/login/oidc/incomingRedirectHandler/FallbackRedirectHandler.ts","../src/login/oidc/AggregateIncomingRedirectHandler.ts","../src/login/oidc/Redirector.ts","../src/login/oidc/ClientRegistrar.ts","../src/login/oidc/refresh/TokenRefresher.ts","../src/login/oidc/oidcHandlers/ClientCredentialsOidcHandler.ts","../src/dependencies.ts","../src/Session.ts","../src/multiSession.ts"],"sourcesContent":["//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * A helper class that will validate items taken from local storage\n */\nimport type { IStorage } from \"@inrupt/solid-client-authn-core\";\nimport { StorageUtility } from \"@inrupt/solid-client-authn-core\";\n\n/**\n * This class in a no-value-added extension of StorageUtility from the core module.\n * The reason it has to be declared is for TSyringe to find the decorators in the\n * same modules as where the dependency container is declared (in this case,\n * the browser module, with the dependancy container in dependencies.ts).\n * @hidden\n */\nexport default class StorageUtilityNode extends StorageUtility {\n  constructor(secureStorage: IStorage, insecureStorage: IStorage) {\n    super(secureStorage, insecureStorage);\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport {\n  isValidRedirectUrl,\n  ClientAuthentication as ClientAuthenticationBase,\n} from \"@inrupt/solid-client-authn-core\";\nimport type {\n  ILoginInputOptions,\n  ISessionInfo,\n} from \"@inrupt/solid-client-authn-core\";\nimport type { EventEmitter } from \"events\";\n\n/**\n * @hidden\n */\nexport default class ClientAuthentication extends ClientAuthenticationBase {\n  // Define these functions as properties so that they don't get accidentally re-bound.\n  // Isn't Javascript fun?\n  login = async (\n    sessionId: string,\n    options: ILoginInputOptions,\n    eventEmitter: EventEmitter\n  ): Promise<ISessionInfo | undefined> => {\n    // Keep track of the session ID\n    await this.sessionInfoManager.register(sessionId);\n    if (\n      typeof options.redirectUrl === \"string\" &&\n      !isValidRedirectUrl(options.redirectUrl)\n    ) {\n      throw new Error(\n        `${options.redirectUrl} is not a valid redirect URL, it is either a malformed IRI or it includes a hash fragment.`\n      );\n    }\n    const loginReturn = await this.loginHandler.handle({\n      sessionId,\n      oidcIssuer: options.oidcIssuer,\n      redirectUrl: options.redirectUrl,\n      clientId: options.clientId,\n      clientSecret: options.clientSecret,\n      clientName: options.clientName ?? options.clientId,\n      refreshToken: options.refreshToken,\n      handleRedirect: options.handleRedirect,\n      // Defaults to DPoP\n      tokenType: options.tokenType ?? \"DPoP\",\n      eventEmitter,\n    });\n\n    if (loginReturn !== undefined) {\n      this.fetch = loginReturn.fetch;\n      return loginReturn;\n    }\n\n    // undefined is returned in the case when the login must be completed\n    // after redirect.\n    return undefined;\n  };\n\n  getSessionIdAll = async (): Promise<string[]> => {\n    return this.sessionInfoManager.getRegisteredSessionIdAll();\n  };\n\n  registerSession = async (sessionId: string): Promise<void> => {\n    return this.sessionInfoManager.register(sessionId);\n  };\n\n  clearSessionAll = async (): Promise<void> => {\n    return this.sessionInfoManager.clearAll();\n  };\n\n  handleIncomingRedirect = async (\n    url: string,\n    eventEmitter: EventEmitter\n  ): Promise<ISessionInfo | undefined> => {\n    const redirectInfo = await this.redirectHandler.handle(url, eventEmitter);\n\n    this.fetch = redirectInfo.fetch;\n    this.boundLogout = redirectInfo.getLogoutUrl;\n\n    return {\n      isLoggedIn: redirectInfo.isLoggedIn,\n      webId: redirectInfo.webId,\n      sessionId: redirectInfo.sessionId,\n    };\n  };\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handles Common Oidc login functions (Like fetching the configuration)\n */\n\nimport type {\n  IClientRegistrar,\n  IIssuerConfigFetcher,\n  ILoginOptions,\n  ILoginHandler,\n  IOidcHandler,\n  IStorageUtility,\n  IClient,\n  IOidcOptions,\n  LoginResult,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  ConfigurationError,\n  handleRegistration,\n} from \"@inrupt/solid-client-authn-core\";\n\nfunction hasIssuer(\n  options: ILoginOptions\n): options is ILoginOptions & { oidcIssuer: string } {\n  return typeof options.oidcIssuer === \"string\";\n}\n\n// TODO: the following code must be pushed to the handlers that actually need redirection\n// function hasRedirectUrl(\n//   options: ILoginOptions\n// ): options is ILoginOptions & { redirectUrl: string } {\n//   return typeof options.redirectUrl === \"string\";\n// }\n\n/**\n * @hidden\n */\nexport default class OidcLoginHandler implements ILoginHandler {\n  constructor(\n    private storageUtility: IStorageUtility,\n    private oidcHandler: IOidcHandler,\n    private issuerConfigFetcher: IIssuerConfigFetcher,\n    private clientRegistrar: IClientRegistrar\n  ) {}\n\n  async canHandle(options: ILoginOptions): Promise<boolean> {\n    return hasIssuer(options);\n  }\n\n  async handle(options: ILoginOptions): Promise<LoginResult> {\n    if (!hasIssuer(options)) {\n      throw new ConfigurationError(\n        `OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(\n          options\n        )}`\n      );\n    }\n    // TODO: the following code must be pushed to the handlers that actually need redirection\n    // if (!hasRedirectUrl(options)) {\n    //   throw new ConfigurationError(\n    //     `OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(\n    //       options\n    //     )}`\n    //   );\n    // }\n\n    const issuerConfig = await this.issuerConfigFetcher.fetchConfig(\n      options.oidcIssuer\n    );\n\n    const clientInfo: IClient = await handleRegistration(\n      options,\n      issuerConfig,\n      this.storageUtility,\n      this.clientRegistrar\n    );\n\n    // Construct OIDC Options\n    const oidcOptions: IOidcOptions = {\n      issuer: issuerConfig.issuer,\n      // TODO: differentiate if DPoP should be true\n      dpop: options.tokenType.toLowerCase() === \"dpop\",\n      // TODO Cleanup to remove the type assertion\n      redirectUrl: options.redirectUrl as string,\n      issuerConfiguration: issuerConfig,\n      client: clientInfo,\n      sessionId: options.sessionId,\n      // If the refresh token is available in storage, use it.\n      refreshToken:\n        options.refreshToken ??\n        (await this.storageUtility.getForUser(\n          options.sessionId,\n          \"refreshToken\"\n        )),\n      handleRedirect: options.handleRedirect,\n      eventEmitter: options.eventEmitter,\n    };\n    // Call proper OIDC Handler\n    return this.oidcHandler.handle(oidcOptions);\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Responsible for selecting the correct OidcHandler to handle the provided OIDC Options\n */\nimport type {\n  IOidcHandler,\n  IOidcOptions,\n  LoginResult,\n} from \"@inrupt/solid-client-authn-core\";\nimport { AggregateHandler } from \"@inrupt/solid-client-authn-core\";\n\n/**\n * @hidden\n */\nexport default class AggregateOidcHandler\n  extends AggregateHandler<[IOidcOptions], LoginResult>\n  implements IOidcHandler\n{\n  constructor(oidcLoginHandlers: IOidcHandler[]) {\n    super(oidcLoginHandlers);\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Responsible for fetching an IDP configuration\n */\nimport type {\n  IIssuerConfig,\n  IIssuerConfigFetcher,\n  IStorageUtility,\n} from \"@inrupt/solid-client-authn-core\";\nimport { ConfigurationError } from \"@inrupt/solid-client-authn-core\";\nimport type { IssuerMetadata } from \"openid-client\";\nimport { Issuer } from \"openid-client\";\n\n/**\n * Transforms an openid-client IssuerMetadata object into an [[IIssuerConfig]]\n * @param metadata the object to transform.\n * @returns an [[IIssuerConfig]] initialized from the metadata.\n * @internal\n */\nexport function configFromIssuerMetadata(\n  metadata: IssuerMetadata\n): IIssuerConfig {\n  // If the fields required as per https://openid.net/specs/openid-connect-discovery-1_0.html are missing,\n  // throw an error.\n  if (metadata.authorization_endpoint === undefined) {\n    throw new ConfigurationError(\n      `Issuer metadata is missing an authorization endpoint: ${JSON.stringify(\n        metadata\n      )}`\n    );\n  }\n  if (metadata.token_endpoint === undefined) {\n    throw new ConfigurationError(\n      `Issuer metadata is missing an token endpoint: ${JSON.stringify(\n        metadata\n      )}`\n    );\n  }\n  if (metadata.jwks_uri === undefined) {\n    throw new ConfigurationError(\n      `Issuer metadata is missing a keyset URI: ${JSON.stringify(metadata)}`\n    );\n  }\n  if (metadata.claims_supported === undefined) {\n    throw new ConfigurationError(\n      `Issuer metadata is missing supported claims: ${JSON.stringify(metadata)}`\n    );\n  }\n  if (metadata.subject_types_supported === undefined) {\n    throw new ConfigurationError(\n      `Issuer metadata is missing supported subject types: ${JSON.stringify(\n        metadata\n      )}`\n    );\n  }\n  return {\n    issuer: metadata.issuer,\n    authorizationEndpoint: metadata.authorization_endpoint,\n    subjectTypesSupported: metadata.subject_types_supported as string[],\n    claimsSupported: metadata.claims_supported as string[],\n    tokenEndpoint: metadata.token_endpoint,\n    jwksUri: metadata.jwks_uri,\n    userinfoEndpoint: metadata.userinfo_endpoint,\n    registrationEndpoint: metadata.registration_endpoint,\n    tokenEndpointAuthMethodsSupported:\n      metadata.token_endpoint_auth_methods_supported,\n    tokenEndpointAuthSigningAlgValuesSupported:\n      metadata.token_endpoint_auth_signing_alg_values_supported,\n    requestObjectSigningAlgValuesSupported:\n      metadata.request_object_signing_alg_values_supported,\n    // TODO: add revocation_endpoint, end_session_endpoint, introspection_endpoint_auth_methods_supported, introspection_endpoint_auth_signing_alg_values_supported, revocation_endpoint_auth_methods_supported, revocation_endpoint_auth_signing_alg_values_supported, mtls_endpoint_aliases to IIssuerConfig\n    // The following properties may be captured as \"unkown\" entries in the metadata object.\n    grantTypesSupported: metadata.grant_types_supported as string[] | undefined,\n    responseTypesSupported: metadata.response_types_supported as\n      | string[]\n      | undefined,\n    idTokenSigningAlgValuesSupported:\n      metadata.id_token_signing_alg_values_supported as string[] | undefined,\n    scopesSupported:\n      metadata.scopes_supported === undefined\n        ? [\"openid\"]\n        : (metadata.scopes_supported as string[]),\n    endSessionEndpoint: metadata.end_session_endpoint,\n  };\n}\n\n/**\n * Transforms an [[IIssuerConfig]] into an openid-client IssuerMetadata\n * @param config the IIssuerConfig to convert.\n * @returns an IssuerMetadata object initialized from the [[IIssuerConfig]].\n */\nexport function configToIssuerMetadata(config: IIssuerConfig): IssuerMetadata {\n  return {\n    issuer: config.issuer,\n    authorization_endpoint: config.authorizationEndpoint,\n    jwks_uri: config.jwksUri,\n    token_endpoint: config.tokenEndpoint,\n    registration_endpoint: config.registrationEndpoint,\n    subject_types_supported: config.subjectTypesSupported,\n    claims_supported: config.claimsSupported,\n    token_endpoint_auth_signing_alg_values_supported:\n      config.tokenEndpointAuthSigningAlgValuesSupported,\n    userinfo_endpoint: config.userinfoEndpoint,\n    token_endpoint_auth_methods_supported:\n      config.tokenEndpointAuthMethodsSupported,\n    request_object_signing_alg_values_supported:\n      config.requestObjectSigningAlgValuesSupported,\n    grant_types_supported: config.grantTypesSupported,\n    response_types_supported: config.responseTypesSupported,\n    id_token_signing_alg_values_supported:\n      config.idTokenSigningAlgValuesSupported,\n    scopes_supported: config.scopesSupported,\n    end_session_endpoint: config.endSessionEndpoint,\n  };\n}\n\n/**\n * @hidden\n */\nexport default class IssuerConfigFetcher implements IIssuerConfigFetcher {\n  constructor(private storageUtility: IStorageUtility) {}\n\n  // This method needs no state (so can be static), and can be exposed to allow\n  // callers to know where this implementation puts state it needs.\n  public static getLocalStorageKey(issuer: string): string {\n    return `issuerConfig:${issuer}`;\n  }\n\n  async fetchConfig(issuer: string): Promise<IIssuerConfig> {\n    // TODO: The issuer config discovery happens in multiple places in the current\n    // codebase, because in openid-client the Client is built based on the Issuer.\n    // The codebase could be refactored so that issuer discovery only happens once.\n    const oidcIssuer = await Issuer.discover(issuer);\n    const issuerConfig: IIssuerConfig = configFromIssuerMetadata(\n      oidcIssuer.metadata\n    );\n    // Update store with fetched config\n    await this.storageUtility.set(\n      IssuerConfigFetcher.getLocalStorageKey(issuer),\n      JSON.stringify(issuerConfig)\n    );\n\n    return issuerConfig;\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handler for the Authorization Code with PKCE Flow\n */\nimport type {\n  IOidcHandler,\n  IOidcOptions,\n  LoginResult,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  DEFAULT_SCOPES,\n  AuthorizationCodeWithPkceOidcHandlerBase,\n} from \"@inrupt/solid-client-authn-core\";\nimport { Issuer, generators } from \"openid-client\";\nimport { configToIssuerMetadata } from \"../IssuerConfigFetcher\";\n\n/**\n * @hidden\n * Authorization code flow spec: https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth\n * PKCE: https://tools.ietf.org/html/rfc7636\n */\nexport default class AuthorizationCodeWithPkceOidcHandler\n  extends AuthorizationCodeWithPkceOidcHandlerBase\n  implements IOidcHandler\n{\n  async handle(oidcLoginOptions: IOidcOptions): Promise<LoginResult> {\n    const issuer = new Issuer(\n      configToIssuerMetadata(oidcLoginOptions.issuerConfiguration)\n    );\n    const client = new issuer.Client({\n      client_id: oidcLoginOptions.client.clientId,\n      client_secret: oidcLoginOptions.client.clientSecret,\n    });\n    const codeVerifier = generators.codeVerifier();\n    const state = generators.state();\n\n    const targetUrl = client.authorizationUrl({\n      code_challenge: generators.codeChallenge(codeVerifier),\n      state,\n      response_type: \"code\",\n      redirect_uri: oidcLoginOptions.redirectUrl,\n      code_challenge_method: \"S256\",\n      prompt: \"consent\",\n      scope: DEFAULT_SCOPES,\n    });\n\n    return this.handleRedirect({\n      oidcLoginOptions,\n      state,\n      codeVerifier,\n      targetUrl,\n    });\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handler for the Refresh Token Flow\n */\nimport type {\n  IOidcHandler,\n  IOidcOptions,\n  IStorageUtility,\n  LoginResult,\n  ISessionInfo,\n  KeyPair,\n  RefreshOptions,\n  ITokenRefresher,\n  TokenEndpointResponse,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  saveSessionInfoToStorage,\n  getWebidFromTokenPayload,\n  generateDpopKeyPair,\n  PREFERRED_SIGNING_ALG,\n  buildAuthenticatedFetch,\n} from \"@inrupt/solid-client-authn-core\";\nimport type { JWK } from \"jose\";\nimport { importJWK } from \"jose\";\nimport { fetch as globalFetch } from \"@inrupt/universal-fetch\";\nimport type { EventEmitter } from \"events\";\nimport type { KeyObject } from \"crypto\";\n\nfunction validateOptions(\n  oidcLoginOptions: IOidcOptions\n): oidcLoginOptions is IOidcOptions & {\n  refreshToken: string;\n  client: { clientId: string; clientSecret: string };\n} {\n  return (\n    oidcLoginOptions.refreshToken !== undefined &&\n    oidcLoginOptions.client.clientId !== undefined\n  );\n}\n\n/**\n * Go through the refresh flow to get a new valid access token, and build an\n * authenticated fetch with it.\n * @param refreshOptions\n * @param dpop\n */\nasync function refreshAccess(\n  refreshOptions: RefreshOptions,\n  dpop: boolean,\n  refreshBindingKey?: KeyPair,\n  eventEmitter?: EventEmitter\n): Promise<TokenEndpointResponse & { fetch: typeof globalFetch }> {\n  try {\n    let dpopKey: KeyPair | undefined;\n    if (dpop) {\n      dpopKey = refreshBindingKey || (await generateDpopKeyPair());\n      // The alg property isn't set by exportJWK, so set it manually.\n      [dpopKey.publicKey.alg] = PREFERRED_SIGNING_ALG;\n    }\n    const tokens = await refreshOptions.tokenRefresher.refresh(\n      refreshOptions.sessionId,\n      refreshOptions.refreshToken,\n      dpopKey\n    );\n    // Rotate the refresh token if applicable\n    const rotatedRefreshOptions = {\n      ...refreshOptions,\n      refreshToken: tokens.refreshToken ?? refreshOptions.refreshToken,\n    };\n    const authFetch = await buildAuthenticatedFetch(\n      globalFetch,\n      tokens.accessToken,\n      {\n        dpopKey,\n        refreshOptions: rotatedRefreshOptions,\n        eventEmitter,\n      }\n    );\n    return Object.assign(tokens, {\n      fetch: authFetch,\n    });\n  } catch (e) {\n    throw new Error(`Invalid refresh credentials: ${e}`);\n  }\n}\n\n/**\n * @hidden\n * Refresh token flow spec: https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokens\n */\nexport default class RefreshTokenOidcHandler implements IOidcHandler {\n  constructor(\n    private tokenRefresher: ITokenRefresher,\n    private storageUtility: IStorageUtility\n  ) {}\n\n  async canHandle(oidcLoginOptions: IOidcOptions): Promise<boolean> {\n    return validateOptions(oidcLoginOptions);\n  }\n\n  async handle(oidcLoginOptions: IOidcOptions): Promise<LoginResult> {\n    if (!(await this.canHandle(oidcLoginOptions))) {\n      throw new Error(\n        `RefreshTokenOidcHandler cannot handle the provided options, missing one of 'refreshToken', 'clientId' in: ${JSON.stringify(\n          oidcLoginOptions\n        )}`\n      );\n    }\n    const refreshOptions: RefreshOptions = {\n      // The type assertion is okay, because it is tested for in canHandle.\n      refreshToken: oidcLoginOptions.refreshToken as string,\n      sessionId: oidcLoginOptions.sessionId,\n      tokenRefresher: this.tokenRefresher,\n    };\n\n    // This information must be in storage for the refresh flow to succeed.\n    await this.storageUtility.setForUser(oidcLoginOptions.sessionId, {\n      issuer: oidcLoginOptions.issuer,\n      dpop: oidcLoginOptions.dpop ? \"true\" : \"false\",\n      clientId: oidcLoginOptions.client.clientId,\n      // Note: We assume here that a client secret is present, which is checked for when validating the options.\n      clientSecret: oidcLoginOptions.client.clientSecret as string,\n    });\n\n    // In the case when the refresh token is bound to a DPoP key, said key must\n    // be used during the refresh grant.\n    const publicKey = await this.storageUtility.getForUser(\n      oidcLoginOptions.sessionId,\n      \"publicKey\"\n    );\n    const privateKey = await this.storageUtility.getForUser(\n      oidcLoginOptions.sessionId,\n      \"privateKey\"\n    );\n    let keyPair: undefined | KeyPair;\n    if (publicKey !== undefined && privateKey !== undefined) {\n      keyPair = {\n        publicKey: JSON.parse(publicKey) as JWK,\n        privateKey: (await importJWK(\n          JSON.parse(privateKey),\n          PREFERRED_SIGNING_ALG[0]\n        )) as KeyObject,\n      };\n    }\n\n    const accessInfo = await refreshAccess(\n      refreshOptions,\n      oidcLoginOptions.dpop,\n      keyPair\n    );\n\n    const sessionInfo: ISessionInfo = {\n      isLoggedIn: true,\n      sessionId: oidcLoginOptions.sessionId,\n    };\n\n    if (accessInfo.idToken === undefined) {\n      throw new Error(\n        `The Identity Provider [${oidcLoginOptions.issuer}] did not return an ID token on refresh, which prevents us from getting the user's WebID.`\n      );\n    }\n    sessionInfo.webId = await getWebidFromTokenPayload(\n      accessInfo.idToken,\n      oidcLoginOptions.issuerConfiguration.jwksUri,\n      oidcLoginOptions.issuer,\n      oidcLoginOptions.client.clientId\n    );\n\n    await saveSessionInfoToStorage(\n      this.storageUtility,\n      oidcLoginOptions.sessionId,\n      undefined,\n      \"true\",\n      accessInfo.refreshToken ?? refreshOptions.refreshToken,\n      undefined,\n      keyPair\n    );\n\n    await this.storageUtility.setForUser(oidcLoginOptions.sessionId, {\n      issuer: oidcLoginOptions.issuer,\n      dpop: oidcLoginOptions.dpop ? \"true\" : \"false\",\n      clientId: oidcLoginOptions.client.clientId,\n    });\n\n    if (oidcLoginOptions.client.clientSecret) {\n      await this.storageUtility.setForUser(oidcLoginOptions.sessionId, {\n        clientSecret: oidcLoginOptions.client.clientSecret,\n      });\n    }\n    if (oidcLoginOptions.client.clientName) {\n      await this.storageUtility.setForUser(oidcLoginOptions.sessionId, {\n        clientName: oidcLoginOptions.client.clientName,\n      });\n    }\n    let expirationDate: number | undefined;\n    expirationDate = accessInfo.expiresAt;\n    if (expirationDate === undefined && accessInfo.expiresIn !== undefined) {\n      expirationDate = accessInfo.expiresIn + Date.now();\n    }\n    sessionInfo.expirationDate = expirationDate;\n\n    return Object.assign(sessionInfo, {\n      fetch: accessInfo.fetch,\n    });\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport { SOLID_CLIENT_AUTHN_KEY_PREFIX } from \"@inrupt/solid-client-authn-core\";\n\nexport const KEY_REGISTERED_SESSIONS = `${SOLID_CLIENT_AUTHN_KEY_PREFIX}registeredSessions`;\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  ISessionInfo,\n  ISessionInternalInfo,\n  ISessionInfoManager,\n} from \"@inrupt/solid-client-authn-core\";\nimport { SessionInfoManagerBase } from \"@inrupt/solid-client-authn-core\";\nimport { KEY_REGISTERED_SESSIONS } from \"../constant\";\n\nexport {\n  getUnauthenticatedSession,\n  clear,\n} from \"@inrupt/solid-client-authn-core\";\n\n/**\n * @hidden\n */\nexport class SessionInfoManager\n  extends SessionInfoManagerBase\n  implements ISessionInfoManager\n{\n  async get(\n    sessionId: string\n  ): Promise<(ISessionInfo & ISessionInternalInfo) | undefined> {\n    const webId = await this.storageUtility.getForUser(sessionId, \"webId\");\n    const isLoggedIn = await this.storageUtility.getForUser(\n      sessionId,\n      \"isLoggedIn\"\n    );\n    const refreshToken = await this.storageUtility.getForUser(\n      sessionId,\n      \"refreshToken\"\n    );\n    const issuer = await this.storageUtility.getForUser(sessionId, \"issuer\");\n\n    if (issuer !== undefined) {\n      return {\n        sessionId,\n        webId,\n        isLoggedIn: isLoggedIn === \"true\",\n        refreshToken,\n        issuer,\n      };\n    }\n\n    return undefined;\n  }\n\n  /**\n   * This function removes all session-related information from storage.\n   * @param sessionId the session identifier\n   * @param storage the storage where session info is stored\n   * @hidden\n   */\n  async clear(sessionId: string): Promise<void> {\n    const rawSessions = await this.storageUtility.get(KEY_REGISTERED_SESSIONS);\n    if (rawSessions !== undefined) {\n      const sessions: string[] = JSON.parse(rawSessions);\n      await this.storageUtility.set(\n        KEY_REGISTERED_SESSIONS,\n        JSON.stringify(\n          sessions.filter((storedSessionId) => storedSessionId !== sessionId)\n        )\n      );\n    }\n    return super.clear(sessionId);\n  }\n\n  /**\n   * Registers a new session, so that its ID can be retrieved.\n   * @param sessionId\n   */\n  async register(sessionId: string): Promise<void> {\n    const rawSessions = await this.storageUtility.get(KEY_REGISTERED_SESSIONS);\n    if (rawSessions === undefined) {\n      return this.storageUtility.set(\n        KEY_REGISTERED_SESSIONS,\n        JSON.stringify([sessionId])\n      );\n    }\n    const sessions: string[] = JSON.parse(rawSessions);\n    if (!sessions.includes(sessionId)) {\n      sessions.push(sessionId);\n      return this.storageUtility.set(\n        KEY_REGISTERED_SESSIONS,\n        JSON.stringify(sessions)\n      );\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns all the registered session IDs. Differs from getAll, which also\n   * returns additional session information.\n   */\n  async getRegisteredSessionIdAll(): Promise<string[]> {\n    return this.storageUtility.get(KEY_REGISTERED_SESSIONS).then((data) => {\n      if (data === undefined) {\n        return [];\n      }\n      return JSON.parse(data);\n    });\n  }\n\n  /**\n   * Deletes all information about all sessions, including their registrations.\n   */\n  async clearAll(): Promise<void> {\n    const rawSessions = await this.storageUtility.get(KEY_REGISTERED_SESSIONS);\n    if (rawSessions === undefined) {\n      return Promise.resolve();\n    }\n    const sessions: string[] = JSON.parse(rawSessions);\n    await Promise.all(sessions.map((sessionId) => this.clear(sessionId)));\n    return this.storageUtility.set(KEY_REGISTERED_SESSIONS, JSON.stringify([]));\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  IClient,\n  IClientRegistrar,\n  IIssuerConfigFetcher,\n  IIncomingRedirectHandler,\n  ISessionInfoManager,\n  IStorageUtility,\n  KeyPair,\n  RefreshOptions,\n  ITokenRefresher,\n  IncomingRedirectResult,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  loadOidcContextFromStorage,\n  saveSessionInfoToStorage,\n  getSessionIdFromOauthState,\n  getWebidFromTokenPayload,\n  generateDpopKeyPair,\n  buildAuthenticatedFetch,\n  EVENTS,\n  maybeBuildRpInitiatedLogout,\n} from \"@inrupt/solid-client-authn-core\";\n// eslint-disable-next-line no-shadow\nimport { URL } from \"url\";\nimport { Issuer } from \"openid-client\";\nimport type { KeyObject } from \"crypto\";\nimport { fetch as globalFetch } from \"@inrupt/universal-fetch\";\n\nimport type { EventEmitter } from \"events\";\nimport { configToIssuerMetadata } from \"../IssuerConfigFetcher\";\n\n/**\n * @hidden\n * Token endpoint request: https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint\n */\nexport class AuthCodeRedirectHandler implements IIncomingRedirectHandler {\n  constructor(\n    private storageUtility: IStorageUtility,\n    private sessionInfoManager: ISessionInfoManager,\n    private issuerConfigFetcher: IIssuerConfigFetcher,\n    private clientRegistrar: IClientRegistrar,\n    private tokenRefresher: ITokenRefresher\n  ) {}\n\n  async canHandle(redirectUrl: string): Promise<boolean> {\n    try {\n      const myUrl = new URL(redirectUrl);\n      return (\n        myUrl.searchParams.get(\"code\") !== null &&\n        myUrl.searchParams.get(\"state\") !== null\n      );\n    } catch (e) {\n      throw new Error(\n        `[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`\n      );\n    }\n  }\n\n  async handle(\n    inputRedirectUrl: string,\n    eventEmitter?: EventEmitter\n  ): Promise<IncomingRedirectResult> {\n    if (!(await this.canHandle(inputRedirectUrl))) {\n      throw new Error(\n        `AuthCodeRedirectHandler cannot handle [${inputRedirectUrl}]: it is missing one of [code, state].`\n      );\n    }\n\n    const url = new URL(inputRedirectUrl);\n    // The type assertion is ok, because we checked in canHandle for the presence of a state\n    const oauthState = url.searchParams.get(\"state\") as string;\n    url.searchParams.delete(\"code\");\n    url.searchParams.delete(\"state\");\n\n    const sessionId = await getSessionIdFromOauthState(\n      this.storageUtility,\n      oauthState\n    );\n    if (sessionId === undefined) {\n      throw new Error(\n        `No stored session is associated with the state [${oauthState}]`\n      );\n    }\n\n    const oidcContext = await loadOidcContextFromStorage(\n      sessionId,\n      this.storageUtility,\n      this.issuerConfigFetcher\n    );\n\n    const issuer = new Issuer(configToIssuerMetadata(oidcContext.issuerConfig));\n    // This should also retrieve the client from storage\n    const clientInfo: IClient = await this.clientRegistrar.getClient(\n      { sessionId },\n      oidcContext.issuerConfig\n    );\n    const client = new issuer.Client({\n      client_id: clientInfo.clientId,\n      client_secret: clientInfo.clientSecret,\n      token_endpoint_auth_method: clientInfo.clientSecret\n        ? \"client_secret_basic\"\n        : \"none\",\n      id_token_signed_response_alg: clientInfo.idTokenSignedResponseAlg,\n    });\n\n    const params = client.callbackParams(inputRedirectUrl);\n    let dpopKey: KeyPair | undefined;\n\n    if (oidcContext.dpop) {\n      dpopKey = await generateDpopKeyPair();\n    }\n    const tokenSet = await client.callback(\n      url.href,\n      params,\n      { code_verifier: oidcContext.codeVerifier, state: oauthState },\n      // The KeyLike type is dynamically bound to either KeyObject or CryptoKey\n      // at runtime depending on the environment. Here, we know we are in a NodeJS\n      // context.\n      { DPoP: dpopKey?.privateKey as KeyObject }\n    );\n\n    const iss = url.searchParams.get(\"iss\");\n\n    if (typeof iss === \"string\" && iss !== oidcContext.issuerConfig.issuer) {\n      throw new Error(\n        `The value of the iss parameter (${iss}) does not match the issuer identifier of the authorization server (${oidcContext.issuerConfig.issuer}). See [rfc9207](https://www.rfc-editor.org/rfc/rfc9207.html#section-2.3-3.1.1)`\n      );\n    }\n\n    if (\n      tokenSet.access_token === undefined ||\n      tokenSet.id_token === undefined\n    ) {\n      // The error message is left minimal on purpose not to leak the tokens.\n      throw new Error(\n        `The Identity Provider [${issuer.metadata.issuer}] did not return the expected tokens: missing at least one of 'access_token', 'id_token.`\n      );\n    }\n    let refreshOptions: RefreshOptions | undefined;\n    if (tokenSet.refresh_token !== undefined) {\n      eventEmitter?.emit(EVENTS.NEW_REFRESH_TOKEN, tokenSet.refresh_token);\n      refreshOptions = {\n        refreshToken: tokenSet.refresh_token,\n        sessionId,\n        tokenRefresher: this.tokenRefresher,\n      };\n    }\n    const authFetch = await buildAuthenticatedFetch(\n      globalFetch,\n      tokenSet.access_token,\n      {\n        dpopKey,\n        refreshOptions,\n        eventEmitter,\n        expiresIn: tokenSet.expires_in,\n      }\n    );\n\n    // tokenSet.claims() parses the ID token, validates its signature, and returns\n    // its payload as a JSON object.\n    const webid = await getWebidFromTokenPayload(\n      tokenSet.id_token,\n      // The JWKS URI is mandatory in the spec, so the non-null assertion is valid.\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      issuer.metadata.jwks_uri!,\n      issuer.metadata.issuer,\n      client.metadata.client_id\n    );\n\n    await saveSessionInfoToStorage(\n      this.storageUtility,\n      sessionId,\n      webid,\n      \"true\",\n      tokenSet.refresh_token,\n      undefined,\n      dpopKey\n    );\n\n    const sessionInfo = await this.sessionInfoManager.get(sessionId);\n    if (!sessionInfo) {\n      throw new Error(\n        `Could not find any session information associated with SessionID [${sessionId}] in our storage.`\n      );\n    }\n\n    return Object.assign(sessionInfo, {\n      fetch: authFetch,\n      expirationDate:\n        typeof tokenSet.expires_in === \"number\"\n          ? (tokenSet.expires_in as number) * 1000 + Date.now()\n          : undefined,\n      getLogoutUrl: maybeBuildRpInitiatedLogout({\n        idTokenHint: tokenSet.id_token,\n        endSessionEndpoint: oidcContext.issuerConfig.endSessionEndpoint,\n      }),\n    } as IncomingRedirectResult);\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  IIncomingRedirectHandler,\n  ISessionInfo,\n} from \"@inrupt/solid-client-authn-core\";\n// eslint-disable-next-line no-shadow\nimport { URL } from \"url\";\n\nimport { getUnauthenticatedSession } from \"../../../sessionInfo/SessionInfoManager\";\n\n/**\n * This class handles redirect IRIs without any query params, and returns an unauthenticated\n * session. It serves as a fallback so that consuming libraries don't have to test\n * for the query params themselves, and can always try to use them as a redirect IRI.\n * @hidden\n */\nexport class FallbackRedirectHandler implements IIncomingRedirectHandler {\n  async canHandle(redirectUrl: string): Promise<boolean> {\n    try {\n      // The next URL object is built for validating it.\n      // eslint-disable-next-line no-new\n      new URL(redirectUrl);\n      return true;\n    } catch (e) {\n      throw new Error(\n        `[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e}`\n      );\n    }\n  }\n\n  async handle(\n    // The argument is ignored, but must be present to implement the interface\n    _redirectUrl: string\n  ): Promise<ISessionInfo & { fetch: typeof fetch }> {\n    return getUnauthenticatedSession();\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Responsible for selecting the correct OidcHandler to handle the provided OIDC Options\n */\nimport type {\n  IIncomingRedirectHandler,\n  ISessionInfo,\n} from \"@inrupt/solid-client-authn-core\";\nimport { AggregateHandler } from \"@inrupt/solid-client-authn-core\";\nimport type { EventEmitter } from \"events\";\n\n/**\n * @hidden\n */\nexport default class AggregateIncomingRedirectHandler\n  extends AggregateHandler<\n    [string, EventEmitter],\n    ISessionInfo & { fetch: typeof fetch }\n  >\n  implements IIncomingRedirectHandler\n{\n  constructor(redirectHandlers: IIncomingRedirectHandler[]) {\n    super(redirectHandlers);\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  IRedirector,\n  IRedirectorOptions,\n} from \"@inrupt/solid-client-authn-core\";\n\n/**\n * @hidden\n */\nexport default class Redirector implements IRedirector {\n  redirect(redirectUrl: string, options?: IRedirectorOptions): void {\n    if (options && options.handleRedirect) {\n      options.handleRedirect(redirectUrl);\n    } else {\n      throw new Error(\n        \"A redirection handler must be provided in the Node environment.\"\n      );\n    }\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  IStorageUtility,\n  IClientRegistrar,\n  IIssuerConfig,\n  IClient,\n  IClientRegistrarOptions,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  ConfigurationError,\n  determineSigningAlg,\n  PREFERRED_SIGNING_ALG,\n} from \"@inrupt/solid-client-authn-core\";\nimport type { Client } from \"openid-client\";\nimport { Issuer } from \"openid-client\";\nimport { configToIssuerMetadata } from \"./IssuerConfigFetcher\";\n\nexport function negotiateClientSigningAlg(\n  issuerConfig: IIssuerConfig,\n  clientPreference: string[]\n): string {\n  if (!Array.isArray(issuerConfig.idTokenSigningAlgValuesSupported)) {\n    throw new Error(\n      \"The OIDC issuer discovery profile is missing the 'id_token_signing_alg_values_supported' value, which is mandatory.\"\n    );\n  }\n\n  const signingAlg = determineSigningAlg(\n    issuerConfig.idTokenSigningAlgValuesSupported,\n    clientPreference\n  );\n\n  if (signingAlg === null) {\n    throw new Error(\n      `No signature algorithm match between ${JSON.stringify(\n        issuerConfig.idTokenSigningAlgValuesSupported\n      )} supported by the Identity Provider and ${JSON.stringify(\n        clientPreference\n      )} preferred by the client.`\n    );\n  }\n\n  return signingAlg;\n}\n\n/**\n * @hidden\n */\nexport default class ClientRegistrar implements IClientRegistrar {\n  constructor(private storageUtility: IStorageUtility) {}\n\n  async getClient(\n    options: IClientRegistrarOptions,\n    issuerConfig: IIssuerConfig\n  ): Promise<IClient> {\n    // If client secret and/or client id are stored in storage, use those.\n    const [\n      storedClientId,\n      storedClientSecret,\n      storedClientName,\n      storedIdTokenSignedResponseAlg,\n    ] = await Promise.all([\n      this.storageUtility.getForUser(options.sessionId, \"clientId\"),\n      this.storageUtility.getForUser(options.sessionId, \"clientSecret\"),\n      this.storageUtility.getForUser(options.sessionId, \"clientName\"),\n      this.storageUtility.getForUser(\n        options.sessionId,\n        \"idTokenSignedResponseAlg\"\n      ),\n    ]);\n    if (storedClientId) {\n      return {\n        clientId: storedClientId,\n        clientSecret: storedClientSecret,\n        clientName: storedClientName as string | undefined,\n        idTokenSignedResponseAlg:\n          storedIdTokenSignedResponseAlg ??\n          negotiateClientSigningAlg(issuerConfig, PREFERRED_SIGNING_ALG),\n        clientType: \"dynamic\",\n      };\n    }\n\n    // TODO: It would be more efficient to only issue a single request (see IssuerConfigFetcher)\n    const issuer = new Issuer(configToIssuerMetadata(issuerConfig));\n\n    if (issuer.metadata.registration_endpoint === undefined) {\n      throw new ConfigurationError(\n        `Dynamic client registration cannot be performed, because issuer does not have a registration endpoint: ${JSON.stringify(\n          issuer.metadata\n        )}`\n      );\n    }\n\n    const signingAlg = negotiateClientSigningAlg(\n      issuerConfig,\n      PREFERRED_SIGNING_ALG\n    );\n\n    // The following is compliant with the example code, but seems to mismatch the\n    // type annotations.\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const registeredClient: Client = await issuer.Client.register({\n      redirect_uris: [options.redirectUrl],\n      client_name: options.clientName,\n      // See https://openid.net/specs/openid-connect-registration-1_0.html\n      id_token_signed_response_alg: signingAlg,\n      grant_types: [\"authorization_code\", \"refresh_token\"],\n    });\n\n    const infoToSave: Record<string, string> = {\n      clientId: registeredClient.metadata.client_id,\n      idTokenSignedResponseAlg:\n        registeredClient.metadata.id_token_signed_response_alg ?? signingAlg,\n    };\n    if (registeredClient.metadata.client_secret) {\n      infoToSave.clientSecret = registeredClient.metadata.client_secret;\n    }\n    await this.storageUtility.setForUser(options.sessionId, infoToSave);\n    return {\n      clientId: registeredClient.metadata.client_id,\n      clientSecret: registeredClient.metadata.client_secret,\n      clientName: registeredClient.metadata.client_name as string | undefined,\n      idTokenSignedResponseAlg:\n        registeredClient.metadata.id_token_signed_response_alg ?? signingAlg,\n      clientType: \"dynamic\",\n    };\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport type {\n  IClient,\n  IClientRegistrar,\n  IIssuerConfigFetcher,\n  IStorageUtility,\n  KeyPair,\n  ITokenRefresher,\n  TokenEndpointResponse,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  loadOidcContextFromStorage,\n  PREFERRED_SIGNING_ALG,\n  EVENTS,\n} from \"@inrupt/solid-client-authn-core\";\nimport type { IssuerMetadata, TokenSet } from \"openid-client\";\nimport { Issuer } from \"openid-client\";\nimport type { KeyObject } from \"crypto\";\nimport type { EventEmitter } from \"events\";\nimport { configToIssuerMetadata } from \"../IssuerConfigFetcher\";\nimport { negotiateClientSigningAlg } from \"../ClientRegistrar\";\n\n// Some identifiers are not in camelcase on purpose, as they are named using the\n// official names from the OIDC/OAuth2 specifications.\n/* eslint-disable camelcase */\n\nconst tokenSetToTokenEndpointResponse = (\n  tokenSet: TokenSet,\n  issuerMetadata: IssuerMetadata\n): TokenEndpointResponse => {\n  if (tokenSet.access_token === undefined) {\n    // The error message is left minimal on purpose not to leak the tokens.\n    throw new Error(\n      `The Identity Provider [${issuerMetadata.issuer}] did not return an access token on refresh.`\n    );\n  }\n\n  if (tokenSet.token_type !== \"Bearer\" && tokenSet.token_type !== \"DPoP\") {\n    throw new Error(\n      `The Identity Provider [${issuerMetadata.issuer}] returned an unknown token type: [${tokenSet.token_type}].`\n    );\n  }\n  return {\n    accessToken: tokenSet.access_token,\n    tokenType: tokenSet.token_type,\n    idToken: tokenSet.id_token,\n    refreshToken: tokenSet.refresh_token,\n    expiresAt: tokenSet.expires_at,\n  };\n};\n\n/**\n * @hidden\n */\nexport default class TokenRefresher implements ITokenRefresher {\n  constructor(\n    private storageUtility: IStorageUtility,\n    private issuerConfigFetcher: IIssuerConfigFetcher,\n    private clientRegistrar: IClientRegistrar\n  ) {}\n\n  async refresh(\n    sessionId: string,\n    refreshToken?: string,\n    dpopKey?: KeyPair,\n    eventEmitter?: EventEmitter\n  ): Promise<TokenEndpointResponse> {\n    const oidcContext = await loadOidcContextFromStorage(\n      sessionId,\n      this.storageUtility,\n      this.issuerConfigFetcher\n    );\n\n    const issuer = new Issuer(configToIssuerMetadata(oidcContext.issuerConfig));\n    // This should also retrieve the client from storage\n    const clientInfo: IClient = await this.clientRegistrar.getClient(\n      { sessionId },\n      oidcContext.issuerConfig\n    );\n    if (clientInfo.idTokenSignedResponseAlg === undefined) {\n      clientInfo.idTokenSignedResponseAlg = negotiateClientSigningAlg(\n        oidcContext.issuerConfig,\n        PREFERRED_SIGNING_ALG\n      );\n    }\n    const client = new issuer.Client({\n      client_id: clientInfo.clientId,\n      client_secret: clientInfo.clientSecret,\n      token_endpoint_auth_method: clientInfo.clientSecret\n        ? \"client_secret_basic\"\n        : \"none\",\n      id_token_signed_response_alg: clientInfo.idTokenSignedResponseAlg,\n    });\n\n    if (refreshToken === undefined) {\n      // TODO: in a next PR, look up storage for a refresh token\n      throw new Error(\n        `Session [${sessionId}] has no refresh token to allow it to refresh its access token.`\n      );\n    }\n\n    if (oidcContext.dpop && dpopKey === undefined) {\n      throw new Error(\n        `For session [${sessionId}], the key bound to the DPoP access token must be provided to refresh said access token.`\n      );\n    }\n\n    const tokenSet = tokenSetToTokenEndpointResponse(\n      await client.refresh(refreshToken, {\n        // openid-client does not support yet jose@3.x, and expects\n        // type definitions that are no longer present. However, the JWK\n        // type that we pass here is compatible with the API, hence the type\n        // assertion.\n        DPoP: dpopKey ? (dpopKey.privateKey as KeyObject) : undefined,\n      }),\n      issuer.metadata\n    );\n\n    if (tokenSet.refreshToken !== undefined) {\n      eventEmitter?.emit(EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);\n      await this.storageUtility.setForUser(sessionId, {\n        refreshToken: tokenSet.refreshToken,\n      });\n    }\n    return tokenSet;\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handler for the Client Credentials Flow\n */\nimport type {\n  IOidcHandler,\n  IOidcOptions,\n  LoginResult,\n  IStorageUtility,\n  ISessionInfo,\n  KeyPair,\n  ITokenRefresher,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  generateDpopKeyPair,\n  PREFERRED_SIGNING_ALG,\n  getWebidFromTokenPayload,\n  buildAuthenticatedFetch,\n  DEFAULT_SCOPES,\n} from \"@inrupt/solid-client-authn-core\";\nimport type { KeyObject } from \"crypto\";\nimport { Issuer } from \"openid-client\";\nimport { fetch as globalFetch } from \"@inrupt/universal-fetch\";\nimport { configToIssuerMetadata } from \"../IssuerConfigFetcher\";\n\n/**\n * @hidden\n */\nexport default class ClientCredentialsOidcHandler implements IOidcHandler {\n  constructor(\n    private tokenRefresher: ITokenRefresher,\n    private _storageUtility: IStorageUtility\n  ) {}\n\n  async canHandle(oidcLoginOptions: IOidcOptions): Promise<boolean> {\n    return (\n      typeof oidcLoginOptions.client.clientId === \"string\" &&\n      typeof oidcLoginOptions.client.clientSecret === \"string\" &&\n      oidcLoginOptions.client.clientType === \"static\"\n    );\n  }\n\n  async handle(oidcLoginOptions: IOidcOptions): Promise<LoginResult> {\n    const issuer = new Issuer(\n      configToIssuerMetadata(oidcLoginOptions.issuerConfiguration)\n    );\n    const client = new issuer.Client({\n      client_id: oidcLoginOptions.client.clientId,\n      client_secret: oidcLoginOptions.client.clientSecret,\n    });\n\n    let dpopKey: KeyPair | undefined;\n\n    if (oidcLoginOptions.dpop) {\n      dpopKey = await generateDpopKeyPair();\n      // The alg property isn't set by exportJWK, so set it manually.\n      [dpopKey.publicKey.alg] = PREFERRED_SIGNING_ALG;\n    }\n\n    const tokens = await client.grant(\n      {\n        grant_type: \"client_credentials\",\n        token_endpoint_auth_method: \"client_secret_basic\",\n        scope: DEFAULT_SCOPES,\n      },\n      {\n        DPoP:\n          oidcLoginOptions.dpop && dpopKey !== undefined\n            ? (dpopKey.privateKey as KeyObject)\n            : undefined,\n      }\n    );\n\n    let webId: string;\n    if (tokens.access_token === undefined) {\n      throw new Error(\n        `Invalid response from Solid Identity Provider [${\n          oidcLoginOptions.issuer\n        }]: ${JSON.stringify(tokens)} is missing 'access_token'.`\n      );\n    }\n\n    if (tokens.id_token === undefined) {\n      // In the case where no ID token is provided, the access token is used to\n      // get the authenticated user's WebID. This is only a temporary solution,\n      // as eventually we want to move away from the Identity Provider issuing\n      // Access Tokens, but by then panel work for the bot use case support will\n      // have moved forward.\n      webId = await getWebidFromTokenPayload(\n        tokens.access_token,\n        oidcLoginOptions.issuerConfiguration.jwksUri,\n        oidcLoginOptions.issuer,\n        // When validating the Access Token, the audience should always be 'solid'\n        \"solid\"\n      );\n    } else {\n      webId = await getWebidFromTokenPayload(\n        tokens.id_token,\n        oidcLoginOptions.issuerConfiguration.jwksUri,\n        oidcLoginOptions.issuer,\n        oidcLoginOptions.client.clientId\n      );\n    }\n\n    const authFetch = await buildAuthenticatedFetch(\n      globalFetch,\n      tokens.access_token,\n      {\n        dpopKey,\n        refreshOptions: tokens.refresh_token\n          ? {\n              refreshToken: tokens.refresh_token,\n              sessionId: oidcLoginOptions.sessionId,\n              tokenRefresher: this.tokenRefresher,\n            }\n          : undefined,\n        eventEmitter: oidcLoginOptions.eventEmitter,\n        expiresIn: tokens.expires_in,\n      }\n    );\n\n    const sessionInfo: ISessionInfo = {\n      isLoggedIn: true,\n      sessionId: oidcLoginOptions.sessionId,\n      webId,\n      expirationDate:\n        tokens.expires_in !== undefined\n          ? Date.now() + tokens.expires_in * 1000\n          : undefined,\n    };\n    return Object.assign(sessionInfo, {\n      fetch: authFetch,\n    });\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Top Level core document. Responsible for setting up the dependency graph\n */\nimport type {\n  IStorage,\n  ITokenRefresher,\n  IIssuerConfigFetcher,\n  IClientRegistrar,\n  IStorageUtility,\n  ILoginHandler,\n  ISessionInfoManager,\n  IIncomingRedirectHandler,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  InMemoryStorage,\n  IWaterfallLogoutHandler,\n} from \"@inrupt/solid-client-authn-core\";\nimport StorageUtilityNode from \"./storage/StorageUtility\";\nimport ClientAuthentication from \"./ClientAuthentication\";\nimport OidcLoginHandler from \"./login/oidc/OidcLoginHandler\";\nimport AggregateOidcHandler from \"./login/oidc/AggregateOidcHandler\";\nimport AuthorizationCodeWithPkceOidcHandler from \"./login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler\";\nimport RefreshTokenOidcHandler from \"./login/oidc/oidcHandlers/RefreshTokenOidcHandler\";\nimport IssuerConfigFetcher from \"./login/oidc/IssuerConfigFetcher\";\nimport { SessionInfoManager } from \"./sessionInfo/SessionInfoManager\";\nimport { AuthCodeRedirectHandler } from \"./login/oidc/incomingRedirectHandler/AuthCodeRedirectHandler\";\nimport { FallbackRedirectHandler } from \"./login/oidc/incomingRedirectHandler/FallbackRedirectHandler\";\nimport AggregateIncomingRedirectHandler from \"./login/oidc/AggregateIncomingRedirectHandler\";\nimport Redirector from \"./login/oidc/Redirector\";\nimport ClientRegistrar from \"./login/oidc/ClientRegistrar\";\nimport TokenRefresher from \"./login/oidc/refresh/TokenRefresher\";\nimport ClientCredentialsOidcHandler from \"./login/oidc/oidcHandlers/ClientCredentialsOidcHandler\";\n\nexport const buildLoginHandler = (\n  storageUtility: IStorageUtility,\n  tokenRefresher: ITokenRefresher,\n  issuerConfigFetcher: IIssuerConfigFetcher,\n  clientRegistrar: IClientRegistrar\n): ILoginHandler => {\n  return new OidcLoginHandler(\n    storageUtility,\n    new AggregateOidcHandler([\n      new RefreshTokenOidcHandler(tokenRefresher, storageUtility),\n      new ClientCredentialsOidcHandler(tokenRefresher, storageUtility),\n      new AuthorizationCodeWithPkceOidcHandler(\n        storageUtility,\n        new Redirector()\n      ),\n    ]),\n    issuerConfigFetcher,\n    clientRegistrar\n  );\n};\n\nexport const buildRedirectHandler = (\n  storageUtility: IStorageUtility,\n  sessionInfoManager: ISessionInfoManager,\n  issuerConfigFetcher: IIssuerConfigFetcher,\n  clientRegistrar: IClientRegistrar,\n  tokenRefresher: ITokenRefresher\n): IIncomingRedirectHandler => {\n  return new AggregateIncomingRedirectHandler([\n    new AuthCodeRedirectHandler(\n      storageUtility,\n      sessionInfoManager,\n      issuerConfigFetcher,\n      clientRegistrar,\n      tokenRefresher\n    ),\n    // This catch-all class will always be able to handle the\n    // redirect IRI, so it must be registered last.\n    new FallbackRedirectHandler(),\n  ]);\n};\n\n/**\n *\n * @param dependencies\n * @deprecated This function will be removed from the external API in an upcoming release.\n */\nexport function getClientAuthenticationWithDependencies(dependencies: {\n  secureStorage?: IStorage;\n  insecureStorage?: IStorage;\n}): ClientAuthentication {\n  const inMemoryStorage = new InMemoryStorage();\n  const secureStorage = dependencies.secureStorage || inMemoryStorage;\n  const insecureStorage = dependencies.insecureStorage || inMemoryStorage;\n\n  const storageUtility = new StorageUtilityNode(secureStorage, insecureStorage);\n\n  const issuerConfigFetcher = new IssuerConfigFetcher(storageUtility);\n  const clientRegistrar = new ClientRegistrar(storageUtility);\n\n  const sessionInfoManager = new SessionInfoManager(storageUtility);\n\n  const tokenRefresher = new TokenRefresher(\n    storageUtility,\n    issuerConfigFetcher,\n    clientRegistrar\n  );\n\n  const loginHandler = buildLoginHandler(\n    storageUtility,\n    tokenRefresher,\n    issuerConfigFetcher,\n    clientRegistrar\n  );\n\n  const redirectHandler = buildRedirectHandler(\n    storageUtility,\n    sessionInfoManager,\n    issuerConfigFetcher,\n    clientRegistrar,\n    tokenRefresher\n  );\n\n  return new ClientAuthentication(\n    loginHandler,\n    redirectHandler,\n    new IWaterfallLogoutHandler(sessionInfoManager, new Redirector()),\n    sessionInfoManager\n  );\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n/**\n * @hidden\n */\nimport type {\n  ILoginInputOptions,\n  ISessionInfo,\n  IStorage,\n  ISessionEventListener,\n  IHasSessionEventListener,\n  ILogoutOptions,\n} from \"@inrupt/solid-client-authn-core\";\nimport {\n  InMemoryStorage,\n  EVENTS,\n  buildProxyHandler,\n} from \"@inrupt/solid-client-authn-core\";\nimport { v4 } from \"uuid\";\n// eslint-disable-next-line no-shadow\nimport { fetch } from \"@inrupt/universal-fetch\";\nimport EventEmitter from \"events\";\nimport type ClientAuthentication from \"./ClientAuthentication\";\nimport { getClientAuthenticationWithDependencies } from \"./dependencies\";\n\nexport interface ISessionOptions {\n  /**\n   * A private storage, unreachable to other scripts on the page. Typically in-memory.\n   * This is deprecated in the NodeJS environment, since there is no issue getting\n   * a storage both private and persistent. If both `secureStorage` and its intended\n   * replacement `storage` are set, `secureStorage` will be ignored.\n   *\n   * @deprecated\n   */\n  secureStorage: IStorage;\n  /**\n   * A storage where non-sensitive information may be stored, potentially longer-lived\n   * than the secure storage. This is deprecated in the NodeJS environment, since there\n   * is no issue getting a storage both private and persistent. If both `insecureStorage`\n   * and its intended replacement `storage` are set, `insecureStorage` will be ignored.\n   *\n   * @deprecated\n   */\n  insecureStorage: IStorage;\n  /**\n   * A private storage where sensitive information may be stored, such as refresh\n   * tokens. The `storage` option aims at eventually replacing the legacy `secureStorage`\n   * and `insecureStorage`, which\n   * @since X.Y.Z\n   */\n  storage: IStorage;\n  /**\n   * Details about the current session\n   */\n  sessionInfo: ISessionInfo;\n  /**\n   * An instance of the library core. Typically obtained using `getClientAuthenticationWithDependencies`.\n   */\n  clientAuthentication: ClientAuthentication;\n  /**\n   * A callback that gets invoked whenever a new refresh token is obtained.\n   * @deprecated Prefer calling Session::onNewRefreshToken instead.\n   */\n  onNewRefreshToken?: (newToken: string) => unknown;\n}\n\n/**\n * If no external storage is provided, this storage gets used.\n */\nexport const defaultStorage = new InMemoryStorage();\n\n/**\n * A {@link Session} object represents a user's session on an application. The session holds state, as it stores information enabling acces to private resources after login for instance.\n */\nexport class Session extends EventEmitter implements IHasSessionEventListener {\n  /**\n   * Information regarding the current session.\n   */\n  public readonly info: ISessionInfo;\n\n  /**\n   * Session attribute exposing the EventEmitter interface, to listen on session\n   * events such as login, logout, etc.\n   * @since 1.14.0\n   */\n  public readonly events: ISessionEventListener;\n\n  private clientAuthentication: ClientAuthentication;\n\n  private tokenRequestInProgress = false;\n\n  private lastTimeoutHandle = 0;\n\n  /**\n   * Session object constructor. Typically called as follows:\n   *\n   * ```typescript\n   * const session = new Session(\n   *   {\n   *     clientAuthentication: getClientAuthenticationWithDependencies({})\n   *   },\n   *   \"mySession\"\n   * );\n   * ```\n   * @param sessionOptions The options enabling the correct instantiation of\n   * the session. Either both storages or clientAuthentication are required. For\n   * more information, see {@link ISessionOptions}.\n   * @param sessionId A string uniquely identifying the session.\n   *\n   */\n  constructor(\n    sessionOptions: Partial<ISessionOptions> = {},\n    sessionId: string | undefined = undefined\n  ) {\n    super();\n    // Until Session no longer implements EventEmitter, this.events is just a proxy\n    // to this (with some interface filtering). When we make the breaking change,\n    // this.events will be a regular SessionEventsEmitter.\n    // this.events = new EventEmitter();\n    this.events = new Proxy(\n      this,\n      buildProxyHandler(\n        Session.prototype,\n        \"events only implements ISessionEventListener\"\n      )\n    );\n    if (sessionOptions.clientAuthentication) {\n      this.clientAuthentication = sessionOptions.clientAuthentication;\n    } else if (sessionOptions.storage) {\n      this.clientAuthentication = getClientAuthenticationWithDependencies({\n        secureStorage: sessionOptions.storage,\n        insecureStorage: sessionOptions.storage,\n      });\n    } else if (sessionOptions.secureStorage && sessionOptions.insecureStorage) {\n      this.clientAuthentication = getClientAuthenticationWithDependencies({\n        secureStorage: sessionOptions.secureStorage,\n        insecureStorage: sessionOptions.insecureStorage,\n      });\n    } else {\n      this.clientAuthentication = getClientAuthenticationWithDependencies({\n        secureStorage: defaultStorage,\n        insecureStorage: defaultStorage,\n      });\n    }\n\n    if (sessionOptions.sessionInfo) {\n      this.info = {\n        sessionId: sessionOptions.sessionInfo.sessionId,\n        isLoggedIn: false,\n        webId: sessionOptions.sessionInfo.webId,\n      };\n    } else {\n      this.info = {\n        sessionId: sessionId ?? v4(),\n        isLoggedIn: false,\n      };\n    }\n    if (sessionOptions.onNewRefreshToken !== undefined) {\n      this.events.on(\n        EVENTS.NEW_REFRESH_TOKEN,\n        sessionOptions.onNewRefreshToken\n      );\n    }\n    // Keeps track of the latest timeout handle in order to clean up on logout\n    // and not leave open timeouts.\n    this.events.on(EVENTS.TIMEOUT_SET, (timeoutHandle: number) => {\n      this.lastTimeoutHandle = timeoutHandle;\n    });\n\n    this.events.on(EVENTS.ERROR, () => this.internalLogout(false));\n    this.events.on(EVENTS.SESSION_EXPIRED, () => this.internalLogout(false));\n  }\n\n  /**\n   * Triggers the login process. Note that this method will redirect the user away from your app.\n   *\n   * @param options Parameter to customize the login behaviour. In particular, two options are mandatory: `options.oidcIssuer`, the user's identity provider, and `options.redirectUrl`, the URL to which the user will be redirected after logging in their identity provider.\n   * @returns This method should redirect the user away from the app: it does not return anything. The login process is completed by {@linkcode handleIncomingRedirect}.\n   */\n  // Define these functions as properties so that they don't get accidentally re-bound.\n  // Isn't Javascript fun?\n  login = async (options?: ILoginInputOptions): Promise<void> => {\n    const loginInfo = await this.clientAuthentication.login(\n      this.info.sessionId,\n      {\n        ...options,\n      },\n      this.events\n    );\n    if (loginInfo !== undefined) {\n      this.info.isLoggedIn = loginInfo.isLoggedIn;\n      this.info.sessionId = loginInfo.sessionId;\n      this.info.webId = loginInfo.webId;\n      this.info.expirationDate = loginInfo.expirationDate;\n    }\n    if (loginInfo?.isLoggedIn) {\n      // Send a signal on successful client credentials login.\n      (this.events as EventEmitter).emit(EVENTS.LOGIN);\n    }\n  };\n\n  /**\n   * Fetches data using available login information. If the user is not logged in, this will behave as a regular `fetch`. The signature of this method is identical to the [canonical `fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n   *\n   * @param url The URL from which data should be fetched.\n   * @param init Optional parameters customizing the request, by specifying an HTTP method, headers, a body, etc. Follows the [WHATWG Fetch Standard](https://fetch.spec.whatwg.org/).\n   */\n  fetch: typeof fetch = async (url, init) => {\n    if (!this.info.isLoggedIn) {\n      // TODO: why does this.clientAuthentication.fetch return throws\n      // \"\"'fetch' called on an object that does not implement interface Window\"\n      // when unauthenticated ?\n      return fetch(url, init);\n    }\n    return this.clientAuthentication.fetch(url, init);\n  };\n\n  /**\n   * Logs the user out of the application.\n   *\n   * There are 2 types of logout supported by this library,\n   * `app` logout and `idp` logout.\n   *\n   * App logout will log the user out within the application\n   * by clearing any session data from the browser. It does\n   * not log the user out of their Solid identity provider,\n   * and should not redirect the user away.\n   * App logout can be performed as follows:\n   * ```typescript\n   * await session.logout({ logoutType: 'app' });\n   * ```\n   *\n   * IDP logout will log the user out of their Solid identity provider,\n   * and will redirect the user away from the application to do so. In order\n   * for users to be redirected back to `postLogoutUrl` you MUST include the\n   * `postLogoutUrl` value in the `post_logout_redirect_uris` field in the\n   * [Client ID Document](https://docs.inrupt.com/ess/latest/security/authentication/#client-identifier-client-id).\n   * IDP logout can be performed as follows:\n   * ```typescript\n   * await session.logout({\n   *  logoutType: 'idp',\n   *  // An optional URL to redirect to after logout has completed;\n   *  // this MUST match a logout URL listed in the Client ID Document\n   *  // of the application that is logged in.\n   *  // If the application is logged in with a Client ID that is not\n   *  // a URI dereferencing to a Client ID Document then users will\n   *  // not be redirected back to the `postLogoutUrl` after logout.\n   *  postLogoutUrl: 'https://example.com/logout',\n   *  // An optional value to be included in the query parameters\n   *  // when the IDP provider redirects the user to the postLogoutRedirectUrl.\n   *  state: \"my-state\"\n   * });\n   * ```\n   */\n  logout = async (options?: ILogoutOptions): Promise<void> =>\n    this.internalLogout(true, options);\n\n  private internalLogout = async (\n    emitEvent: boolean,\n    options?: ILogoutOptions\n  ): Promise<void> => {\n    await this.clientAuthentication.logout(this.info.sessionId, options);\n    // Clears the timeouts on logout so that Node does not hang.\n    clearTimeout(this.lastTimeoutHandle);\n    this.info.isLoggedIn = false;\n    if (emitEvent) {\n      (this.events as EventEmitter).emit(EVENTS.LOGOUT);\n    }\n  };\n\n  /**\n   * Completes the login process by processing the information provided by the identity provider through redirect.\n   *\n   * @param url The URL of the page handling the redirect, including the query parameters — these contain the information to process the login.\n   */\n  handleIncomingRedirect = async (\n    url: string\n  ): Promise<ISessionInfo | undefined> => {\n    let sessionInfo;\n\n    if (this.info.isLoggedIn) {\n      sessionInfo = this.info;\n    } else if (this.tokenRequestInProgress) {\n      // TODO: PMcB55:  Add this logging once we start using LogLevel.\n      // Log the interesting fact that (we think!) we're already requesting\n      // the token...\n      // log.debug(`Handle incoming request called, but we're already requesting our token`);\n    } else {\n      try {\n        this.tokenRequestInProgress = true;\n        sessionInfo = await this.clientAuthentication.handleIncomingRedirect(\n          url,\n          this.events\n        );\n\n        if (sessionInfo) {\n          this.info.isLoggedIn = sessionInfo.isLoggedIn;\n          this.info.webId = sessionInfo.webId;\n          this.info.sessionId = sessionInfo.sessionId;\n          if (sessionInfo.isLoggedIn) {\n            // The login event can only be triggered **after** the user has been\n            // redirected from the IdP with access and ID tokens.\n            (this.events as EventEmitter).emit(EVENTS.LOGIN);\n          }\n        }\n      } finally {\n        this.tokenRequestInProgress = false;\n      }\n    }\n    return sessionInfo;\n  };\n\n  /**\n   * Register a callback function to be called when a user completes login.\n   *\n   * The callback is called when {@link handleIncomingRedirect} completes successfully.\n   *\n   * @param callback The function called when a user completes login.\n   * @deprecated Prefer session.events.on(EVENTS.LOGIN, callback)\n   */\n  onLogin(callback: () => unknown): void {\n    this.events.on(EVENTS.LOGIN, callback);\n  }\n\n  /**\n   * Register a callback function to be called when a user logs out:\n   *\n   * @param callback The function called when a user completes logout.\n   * @deprecated Prefer session.events.on(EVENTS.LOGOUT, callback)\n   */\n  onLogout(callback: () => unknown): void {\n    this.events.on(EVENTS.LOGOUT, callback);\n  }\n\n  /**\n   * Register a callback function to be called when a new Refresh Token is issued\n   * for the session. This helps keeping track of refresh token rotation.\n   *\n   * @param callback The function called when a new refresh token is issued.\n   * @deprecated Prefer session.events.on(EVENTS.NEW_REFRESH_TOKEN, callback)\n   */\n  onNewRefreshToken(callback: (newToken: string) => unknown): void {\n    this.events.on(EVENTS.NEW_REFRESH_TOKEN, callback);\n  }\n}\n","//\n// Copyright Inrupt Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to use,\n// copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n// Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport type { IStorage } from \"@inrupt/solid-client-authn-core\";\nimport type ClientAuthentication from \"./ClientAuthentication\";\nimport { getClientAuthenticationWithDependencies } from \"./dependencies\";\nimport { defaultStorage, Session } from \"./Session\";\n\n/**\n * Retrieve a Session from the given storage based on its session ID. If possible,\n * the Session is logged in before it is returned, so that `session.fetch` may\n * access private Resource without any additional interaction.\n *\n * If no storage is provided, a default in-memory storage will be used. It is\n * instanciated once on load, and is shared across all the sessions. Since it\n * is only available in memory, the storage is lost when the code stops running.\n *\n * A Session is available in storage as soon as it logged in once, and it is removed\n * from storage on logout.\n *\n * @param sessionId The ID of the Session to retrieve\n * @param storage The storage where the Session can be found\n * @returns A session object, authenticated if possible, or undefined if no Session\n * in storage matches the given ID.\n */\nexport async function getSessionFromStorage(\n  sessionId: string,\n  storage?: IStorage,\n  onNewRefreshToken?: (newToken: string) => unknown\n): Promise<Session | undefined> {\n  const clientAuth: ClientAuthentication = storage\n    ? getClientAuthenticationWithDependencies({\n        secureStorage: storage,\n        insecureStorage: storage,\n      })\n    : getClientAuthenticationWithDependencies({\n        secureStorage: defaultStorage,\n        insecureStorage: defaultStorage,\n      });\n  const sessionInfo = await clientAuth.getSessionInfo(sessionId);\n  if (sessionInfo === undefined) {\n    return undefined;\n  }\n  const session = new Session({\n    sessionInfo,\n    clientAuthentication: clientAuth,\n    onNewRefreshToken,\n  });\n  if (sessionInfo.refreshToken) {\n    await session.login({\n      oidcIssuer: sessionInfo.issuer,\n    });\n  }\n  return session;\n}\n\n/**\n * Retrieve the IDs for all the Sessions available in the given storage. Note that\n * it is only the Session IDs that are returned, and not Session object. Given a\n * Session ID, one may use [[getSessionFromStorage]] to get the actual Session\n * object, while being conscious that logging in a Session required an HTTP\n * interaction, so doing it in batch for a large number of sessions may result\n * in performance issues.\n *\n * If no storage is provided, a default in-memory storage will be used. It is\n * instanciated once on load, and is shared across all the sessions. Since it\n * is only available in memory, the storage is lost when the code stops running.\n *\n * A Session is available in storage as soon as it logged in once, and it is removed\n * from storage on logout.\n *\n * @param storage The storage where the Session can be found\n * @returns An array of Session IDs\n */\nexport async function getSessionIdFromStorageAll(\n  storage?: IStorage\n): Promise<string[]> {\n  const clientAuth: ClientAuthentication = storage\n    ? getClientAuthenticationWithDependencies({\n        secureStorage: storage,\n        insecureStorage: storage,\n      })\n    : getClientAuthenticationWithDependencies({\n        secureStorage: defaultStorage,\n        insecureStorage: defaultStorage,\n      });\n  return clientAuth.getSessionIdAll();\n}\n\n/**\n * Clear the given storage from any existing Session ID. In order to remove an\n * individual Session from storage, rather than going through this batch deletion,\n * one may simply log the Session out calling `session.logout`.\n *\n * If no storage is provided, a default in-memory storage will be used. It is\n * instanciated once on load, and is shared across all the sessions. Since it\n * is only available in memory, the storage is lost when the code stops running.\n *\n * A Session is available in storage as soon as it logged in once, and it is removed\n * from storage on logout.\n *\n * @param storage The storage where the Session can be found\n */\nexport async function clearSessionFromStorageAll(\n  storage?: IStorage\n): Promise<void> {\n  const clientAuth: ClientAuthentication = storage\n    ? getClientAuthenticationWithDependencies({\n        secureStorage: storage,\n        insecureStorage: storage,\n      })\n    : getClientAuthenticationWithDependencies({\n        secureStorage: defaultStorage,\n        insecureStorage: defaultStorage,\n      });\n  return clientAuth.clearSessionAll();\n}\n"],"names":["ClientAuthenticationBase","globalFetch"],"mappings":"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"}